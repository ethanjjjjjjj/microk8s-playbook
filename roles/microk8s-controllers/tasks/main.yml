---
# tasks file for roles/microk8s-controllers
- name: get join code
  command: microk8s add-node -l 600
  register: join_code
  changed_when: false
  run_once: true
  when: inventory_hostname == groups["controllers"][0]

- name: Join node into cluster as controller
  command: "{{join_code.stdout| regex_search('(microk8s join \\S+)\\n\\n','\\1') | first}}"
  register: join_output
  changed_when: " not (('is already known' in join_output.stdout) or ('The joining node has the same IP' in join_output.stdout))"
  failed_when: "not (('is already known' in join_output.stdout) or ('The node has joined the cluster' in join_output.stdout) or ('The joining node has the same IP' in join_output.stdout) or ('Waiting for this node to finish joining the cluster' in join_output.stdout))"

- name: enable community addons
  command: "microk8s enable community"
  run_once: true
  register: addon_output
  changed_when: "'is already enabled' not in addon_output.stdout"

- name: enable addons
  run_once: true
  command: "microk8s enable {{item}}"
  loop: "{{microk8s_addons}}"
  register: addon_output
  changed_when: "'is already enabled' not in addon_output.stdout"

- name: get the non root remote user
  set_fact:
    remote_regular_user: "{{ ansible_env.SUDO_USER }}"

- name: create kube dir
  file:
    state: directory
    #name: "/home/{{ remote_regular_user }}/.kube"
    name: "/root/.kube"
    mode: "u=rwx,g-rwx,o-rwx"
  run_once: true
  when: inventory_hostname == groups["controllers"][0]

- name: get kubeconfig
  run_once: true
  command: "microk8s config"
  register: kubeconfig
  changed_when: false
  when: inventory_hostname == groups["controllers"][0]

- name: write kubeconfig
  copy:
    content: "{{kubeconfig.stdout}}"
#    dest: "/home/{{ remote_regular_user }}/.kube/config"
    dest: "/root/.kube/config"
    owner: "{{ remote_regular_user }}"
    mode: "u=r,g-rwx,o-rwx"
  run_once: true
  when: inventory_hostname == groups["controllers"][0]

- name: get service ip
  command: "kubectl get service -o jsonpath={.items[0].spec.clusterIP} -l component=apiserver"
  register: api_service_ip
  run_once: true
  changed_when: false
  when: inventory_hostname == groups["controllers"][0]

#- name: generate certificates for desired ips and hostnames

#- name: with_list -> loop
#  ansible.builtin.debug:
#    msg: "{{ item }}"
#  loop: "{{external_ips+[api_service_ip.stdout,hostvars[inventory_hostname]['ansible_default_ipv4']['address']]}}"
#  run_once: true
#  when: inventory_hostname == groups["controllers"][0]


- name: write external ips to cert config
  ansible.builtin.lineinfile:
    insertafter: '\[ alt_names \]'
    line: "IP.{{idx+1}} = {{item}}"
    regexp: "IP[.]{{idx+1}} = "
    path: /var/snap/microk8s/current/certs/csr.conf.template
  loop_control:
    index_var: idx
  loop: "{{external_ips+[api_service_ip.stdout,hostvars[inventory_hostname]['ansible_default_ipv4']['address']]}}"
  register: update_cert_template

- name: regenerate certificate for new ips
  command: "microk8s refresh-certs -e server.crt"
  changed_when: update_cert_template.changed

- name: get new kubeconfig
  run_once: true
  command: "microk8s config"
  register: kubeconfig
  changed_when: false
  when: inventory_hostname == groups["controllers"][0]

- name: write new kubeconfig
  copy:
    content: "{{kubeconfig.stdout}}"
#    dest: "/home/{{ remote_regular_user }}/.kube/config"
    dest: "/root/.kube/config"
    owner: "{{ remote_regular_user }}"
    mode: "u=r,g-rwx,o-rwx"
  run_once: true
  when: inventory_hostname == groups["controllers"][0]
